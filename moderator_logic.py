import os
import asyncio
import logging
import json
import re
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, Any, List

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ChatPermissions

logging.basicConfig(level=logging.INFO)

# ----------------- –ù–ê–°–¢–†–û–ô–ö–ò -----------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –î–æ–±–∞–≤—å –µ–≥–æ –≤ Secrets Replit.")
OWNER_ID = 7322925570  # —Ç–≤–æ–π ID
DATA_FILE = Path("data.json")
MUTE_DEFAULT_MINUTES = 30
# -------------------------------------------

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# pending actions –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
pending_actions: Dict[int, Dict[str, Any]] = {}

# ----------------- –£–¢–ò–õ–ò–¢–´ ------------------
def load_data() -> Dict[str, Any]:
    if not DATA_FILE.exists():
        data = {
            "admins": [],
            "forbidden_words": [],
            "mute_minutes": MUTE_DEFAULT_MINUTES,
            "allowed_links": []
        }
        save_data(data)
        return data
    with DATA_FILE.open("r", encoding="utf-8") as f:
        return json.load(f)

def save_data(data: Dict[str, Any]) -> None:
    with DATA_FILE.open("w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def is_owner_or_admin(user_id: int, data: Dict[str, Any]) -> bool:
    return user_id == OWNER_ID or user_id in data.get("admins", [])

def normalize_word(w: str) -> str:
    return w.strip().lower()

def build_admin_panel(data: Dict[str, Any]) -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ", callback_data="add_word"),
            InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ", callback_data="remove_word"),
        ],
        [
            InlineKeyboardButton(text="‚è±Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞", callback_data="set_mute"),
            InlineKeyboardButton(text="üìú –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤", callback_data="list_words"),
        ],
        [
            InlineKeyboardButton(text="‚ûï –†–∞–∑—Ä–µ—à–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data="add_allow_link"),
            InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—É—é —Å—Å—ã–ª–∫—É", callback_data="remove_allow_link"),
        ],
        [
            InlineKeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏", callback_data="manage_admins"),
            InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_settings"),
        ]
    ])
    return kb

def build_back_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])

def extract_domains_from_text(text: str) -> List[str]:
    urls = re.findall(r"(https?://[^\s]+)", text)
    domains = []
    for u in urls:
        m = re.match(r"https?://([^/]+)", u)
        if m:
            domains.append(m.group(1).lower())
    return domains

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
data = load_data()

# ----------------- –ö–û–ú–ê–ù–î–´ ------------------

@dp.message(Command(commands=["start", "help"]))
async def cmd_start(message: types.Message):
    if message.chat.type == "private" and not is_owner_or_admin(message.from_user.id, data):
        return
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–¥–µ—Ä–∞—Ç–æ—Ä-–±–æ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /dante –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

@dp.message(Command(commands=["dante"]))
async def cmd_dante(message: types.Message):
    if message.chat.type == "private" and not is_owner_or_admin(message.from_user.id, data):
        return
    text = (
        "üìå –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞:\n\n"
        "/admin - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (–≤ –õ–° –≤–ª–∞–¥–µ–ª—å—Ü–∞/–∞–¥–º–∏–Ω–æ–≤)\n"
        "/dante - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫\n\n"
        "–í –≥—Ä—É–ø–ø–∞—Ö:\n"
        "- –ú—É—Ç –∑–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞\n"
        "- –ë–∞–Ω –∑–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏\n"
        "- –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫\n"
        "- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–æ–ø–∏–∫–æ–≤ –∏ –æ–±—ã—á–Ω—ã—Ö —á–∞—Ç–æ–≤\n"
    )
    await message.reply(text)

@dp.message(Command(commands=["admin"]))
async def cmd_admin(message: types.Message):
    if message.chat.type != "private":
        await message.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π /admin —Ç–æ–ª—å–∫–æ –≤ –õ–°.")
        return
    if not is_owner_or_admin(message.from_user.id, data):
        return
    kb = build_admin_panel(data)
    await message.answer("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=kb)

# ----------------- –ê–ù–¢–ò-–°–ü–ê–ú ------------------

@dp.message()
async def moderate_message(message: types.Message):
    if message.from_user.is_bot:
        return
    if message.chat.type == "private":
        return

    chat_id = message.chat.id
    user = message.from_user
    text = message.text or message.caption or ""
    text_lower = (text or "").lower()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–æ–∫
    if "http://" in text_lower or "https://" in text_lower:
        domains = extract_domains_from_text(text_lower)
        allowed = data.get("allowed_links", [])
        if not any(any(a in d for a in allowed) for d in domains):
            try:
                await bot.delete_message(chat_id, message.message_id)
                await bot.ban_chat_member(chat_id, user.id)
            except:
                pass
            who = f"@{user.username}" if user.username else f"{user.full_name}/{user.id}"
            await bot.send_message(chat_id, f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {who} –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –∏ –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω.")
            return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–≤
    for w in data.get("forbidden_words", []):
        if re.search(rf"\b{re.escape(w)}\b", text_lower):
            try:
                await bot.delete_message(chat_id, message.message_id)
            except:
                pass
            until = datetime.utcnow() + timedelta(minutes=data.get("mute_minutes", MUTE_DEFAULT_MINUTES))
            try:
                await bot.restrict_chat_member(chat_id, user.id, ChatPermissions(can_send_messages=False), until_date=until)
            except:
                pass
            who = f"@{user.username}" if user.username else f"{user.full_name}/{user.id}"
            await bot.send_message(chat_id, f"üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {who} –Ω–∞–ø–∏—Å–∞–ª –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –∏ –ø–æ–ª—É—á–∏–ª –º—É—Ç.")
            return

# ----------------- –í–´–ö–õ–Æ–ß–ï–ù–ò–ï ------------------
async def shutdown():
    save_data(data)
    try:
        await bot.session.close()
    except:
        pass
